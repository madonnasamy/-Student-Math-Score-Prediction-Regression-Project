# -*- coding: utf-8 -*-
"""Student Math Score Prediction (Regression Project).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSHVw_NeRYV19Psx1O0s616KXhUO4KvM
"""

import pandas as pd
from sklearn.model_selection import train_test_split

df = pd.read_csv("StudentsPerformance.csv")

df['gender'] = df['gender'].map({'male': 0, 'female': 1})
df['lunch'] = df['lunch'].map({'standard': 1, 'free/reduced': 0})
df['test preparation course'] = df['test preparation course'].map({'none': 0, 'completed': 1})
df['race/ethnicity'] = df['race/ethnicity'].astype('category').cat.codes
df['parental level of education'] = df['parental level of education'].astype('category').cat.codes

y = df['math score']

X = df.drop(['math score'], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

lin_model = LinearRegression()

lin_model.fit(X_train, y_train)

y_pred = lin_model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("ðŸ“Š Linear Regression Evaluation")
print("MAE:", round(mae, 2))
print("MSE:", round(mse, 2))
print("RMSE:", round(rmse, 2))
print("RÂ² Score:", round(r2, 2))

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
plt.plot(y_test.values, label='Actual', marker='o')
plt.plot(y_pred, label='Predicted', marker='x')
plt.title("Random Forest Regression: Actual vs Predicted")
plt.xlabel("Student")
plt.ylabel("Math Score")
plt.legend()
plt.grid(True)
plt.show()

from sklearn.ensemble import RandomForestRegressor

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

rf_model.fit(X_train, y_train)

y_rf_pred = rf_model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

mae = mean_absolute_error(y_test, y_rf_pred)
mse = mean_squared_error(y_test, y_rf_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_rf_pred)

print("ðŸŒ² Random Forest Regressor Evaluation")
print("MAE:", round(mae, 2))
print("MSE:", round(mse, 2))
print("RMSE:", round(rmse, 2))
print("RÂ² Score:", round(r2, 2))

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
plt.plot(y_test.values, label='Actual', marker='o')
plt.plot(y_rf_pred, label='Predicted', marker='x')
plt.title("Random Forest Regression: Actual vs Predicted")
plt.xlabel("Student")
plt.ylabel("Math Score")
plt.legend()
plt.grid(True)
plt.show()

from sklearn.preprocessing import StandardScaler

X_train_scaled = X_train.copy()
X_test_scaled = X_test.copy()

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

from sklearn.svm import SVR

svr_model = SVR(kernel='rbf')

svr_model.fit(X_train_scaled, y_train)

y_svr_pred = svr_model.predict(X_test_scaled)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np

mae = mean_absolute_error(y_test, y_svr_pred)
mse = mean_squared_error(y_test, y_svr_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_svr_pred)

print("ðŸ§  SVR Evaluation")
print("MAE:", round(mae, 2))
print("MSE:", round(mse, 2))
print("RMSE:", round(rmse, 2))
print("RÂ² Score:", round(r2, 2))

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
plt.plot(y_test.values, label='Actual', marker='o')
plt.plot(y_svr_pred, label='Predicted', marker='x')
plt.title("SVR: Actual vs Predicted")
plt.xlabel("Student")
plt.ylabel("Math Score")
plt.legend()
plt.grid(True)
plt.show()